<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="networking-basics"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Basic networking</title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
    Linux offers the necessary networking tools and features for integration
    into all types of network structures. Network access using a network card
    can be configured with &yast;. Manual configuration is also possible. In
    this chapter, only the fundamental mechanisms and the relevant network
    configuration files are covered.
   </para>
    </abstract>
  </info>
  <para>
  Linux and other Unix operating systems use the TCP/IP protocol. It is not a
  single network protocol, but a family of network protocols that offer multiple
  services. The protocols listed in <xref linkend="tab-net-basic-tcpproto"/>
  are provided for exchanging data between two machines via TCP/IP. Networks
  combined by TCP/IP, comprising a worldwide network, are also called
  <quote>the Internet.</quote>
 </para>
 <para>
  RFC stands for <emphasis>Request for Comments</emphasis>. RFCs are documents
  that describe Internet protocols and implementation procedures for
  the operating system and its applications. The RFC documents describe the
  setup of Internet protocols. For more information about RFCs, see
  <link xlink:href="https://datatracker.ietf.org/"/>.
 </para>
 <variablelist xml:id="tab-net-basic-tcpproto">
  <title>Several protocols in the TCP/IP protocol family</title>
  <varlistentry>
   <term>TCP</term>
   <listitem>
    <para>
     Transmission Control Protocol: a connection-oriented secure protocol. The
     data to transmit is first sent by the application as a stream of data and
     converted into the appropriate format by the operating system. The data
     arrives at the respective application on the destination host in the
     original data stream format it was initially sent. TCP determines whether
     any data has been lost or jumbled during the transmission. TCP is
     implemented wherever the data sequence matters.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>UDP</term>
   <listitem>
    <para>
     User Datagram Protocol: a connectionless, insecure protocol. The data to
     transmit is sent in the form of packets generated by the application. The
     order in which the data arrives at the recipient is not guaranteed and
     data loss is possible. UDP is suitable for record-oriented applications.
     It features a smaller latency period than TCP.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>ICMP</term>
   <listitem>
    <para>
     Internet Control Message Protocol: this is not a protocol for the end
     user, but a special control protocol that issues error reports and can
     control the behavior of machines participating in TCP/IP data transfer. In
     addition, it provides a special echo mode that can be viewed using the
     program ping.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>IGMP</term>
   <listitem>
    <para>
     Internet Group Management Protocol: this protocol controls machine
     behavior when implementing IP multicast.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <para>
  As shown in <xref linkend="fig-net-basic-OSI"/>, data exchange takes place in
  different layers. The actual network layer is the insecure data transfer via
  IP (Internet protocol). On top of IP, TCP (transmission control protocol)
  guarantees, to a certain extent, security of the data transfer. The IP layer
  is supported by the underlying hardware-dependent protocol, such as Ethernet.
 </para>
 <figure xml:id="fig-net-basic-OSI">
  <title>Simplified layer model for TCP/IP</title>
  <mediaobject>
   <imageobject role="fo">
    <imagedata width="100%" fileref="net_basic_osi.svg"/>
   </imageobject>
   <imageobject role="html">
    <imagedata width="75%" fileref="net_basic_osi.png"/>
   </imageobject>
   <textobject><phrase>OSI and TCP</phrase>
   </textobject>
  </mediaobject>
 </figure>
 <para>
  The diagram provides one or two examples for each layer. The layers are
  ordered according to <emphasis>abstraction levels</emphasis>. The lowest layer
  is close to the hardware. The uppermost layer, however, is almost a complete
  abstraction from the hardware. Every layer has its own special function. The
  special functions of each layer are implicit in their description. The data
  link and physical layers represent the physical network used, such as
  Ethernet.
 </para>
 <para>
  Almost all hardware protocols work on a packet-oriented basis. The data to
  transmit is collected into <emphasis>packets</emphasis> (it cannot be sent all
  at once). The maximum size of a TCP/IP packet is approximately 64Â KB. Packets
  are normally small, as the network hardware can be a limiting factor. The
  maximum size of a data packet on Ethernet is about fifteen hundred bytes. The
  size of a TCP/IP packet is limited to this amount when the data is sent over
  Ethernet. If more data is transferred, more data packets need to be sent by
  the operating system.
 </para>
 <para>
  For the layers to serve their designated functions, additional information
  regarding each layer must be saved in the data packet. This takes place in
  the <emphasis>header</emphasis> of the packet. Every layer attaches a small
  block of data, called the protocol header, to the front of each emerging
  packet. A sample TCP/IP data packet traveling over an Ethernet cable is
  illustrated in <xref linkend="fig-net-basic-TCPPaket"/>. The proof sum is
  located at the end of the packet, not at the beginning. This simplifies
  things for the network hardware.
 </para>
 <figure xml:id="fig-net-basic-TCPPaket">
  <title>TCP/IP Ethernet packet</title>
  <mediaobject>
   <imageobject role="fo">
    <imagedata width="80%" fileref="net_basic_tcppacket.svg"/>
   </imageobject>
   <imageobject role="html">
    <imagedata width="75%" fileref="net_basic_tcppacket.png"/>
   </imageobject>
  </mediaobject>
 </figure>
 <para>
  When an application sends data over the network, the data passes through each
  layer, all implemented in the Linux kernel except the physical layer. Each
  layer is responsible for preparing the data so it can be passed to the next
  layer. The lowest layer is ultimately responsible for sending the data. The
  entire procedure is reversed when data is received. Like the layers of an
  onion, in each layer the protocol headers are removed from the transported
  data. Finally, the transport layer is responsible for making the data
  available for use by the applications at the destination. In this manner, one
  layer only communicates with the layer directly above or below it. For
  applications, it is irrelevant whether data is transmitted via a wireless or
  wired connection. Likewise, it is irrelevant for the data line which kind of
  data is transmitted, if packets are in the correct format.
 </para>
</topic>
